<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_StatePattern_Test" Id="{06de0f91-eb87-0e9d-29e0-4efc69344550}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FB_StatePattern_Test EXTENDS TcUnit.FB_TestSuite IMPLEMENTS I_Object
VAR
    _ipSelf:            I_Object;

    fbStateMachine1:    FB_StateMachine1;
    fbState11:          FB_State1(0);
    fbState12:          FB_State2(0);
    fbState13:          FB_State3(0);
    fbState14:          FB_State4(0);

    fbStateMachine2:    FB_StateMachine1;
    fbState21:          FB_State1(THIS^.fbStateMachine2);
    fbState22:          FB_State2(THIS^.fbStateMachine2);
    fbState23:          FB_State3(THIS^.fbStateMachine2);
    fbState24:          FB_State4(THIS^.fbStateMachine2);

    fbYear:             FB_Year;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAdd4StatesByInitializationExpectSuccess();
TestAdd4StatesManuallyExpectSuccess();
TestClearAllStatesExpectSuccess();
TestSeasonStateMachineAllSeasons();
]]></ST>
    </Implementation>
    <Method Name="Equals" Id="{9abc1d41-6270-0a6b-3f09-72b08cbc0174}">
      <Declaration><![CDATA[METHOD Equals : BOOL
VAR_INPUT
    ipObject:       I_Object;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Equals := ipObject = THIS^._ipSelf;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="ipContext" Id="{718e4ae1-440b-0934-134f-0cab42c0028f}">
      <Declaration><![CDATA[PROPERTY ipContext : I_Context
]]></Declaration>
      <Get Name="Get" Id="{22647422-bd1a-0c4e-35c1-0b22075294c6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ipContext := 0;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="nIdentity" Id="{acb8f35d-b024-0752-213c-e8b423302ed2}">
      <Declaration><![CDATA[PROPERTY nIdentity : ULINT
]]></Declaration>
      <Get Name="Get" Id="{102d0088-3642-0796-2aed-226135be35a1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nIdentity := ADR(THIS^);
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="sPath" Id="{4a156f9e-af23-00d7-3e47-92a7922ff2c1}">
      <Declaration><![CDATA[PROPERTY sPath : STRING(MAX_STRING_LENGTH)
]]></Declaration>
      <Get Name="Get" Id="{47b7a7e1-b433-0024-1075-17050bceab9d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sPath := '';
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TestAdd4StatesByInitializationExpectSuccess" Id="{1f32de62-b788-0a8f-0467-6786e80b619a}">
      <Declaration><![CDATA[METHOD PRIVATE TestAdd4StatesByInitializationExpectSuccess
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestAdd4StatesByInitializationExpectSuccess');

THIS^.AssertEquals_UDINT(Expected := 4,
                         Actual := THIS^.fbStateMachine2.nStateCount,
                         Message := 'Unexpected number of states added to state machine');
THIS^.AssertTrue(Condition := THIS^.fbStateMachine2.Contains(THIS^.fbState21),
                 Message := 'State machine does not contain added state fbState5');
THIS^.AssertTrue(Condition := THIS^.fbStateMachine2.Contains(THIS^.fbState22),
                 Message := 'State machine does not contain added state fbState6');
THIS^.AssertTrue(Condition := THIS^.fbStateMachine2.Contains(THIS^.fbState23),
                 Message := 'State machine does not contain added state fbState7');
THIS^.AssertTrue(Condition := THIS^.fbStateMachine2.Contains(THIS^.fbState24),
                 Message := 'State machine does not contain added state fbState8');

THIS^.AssertTrue(Condition := THIS^.fbState21.ipStateMachine.Equals(THIS^.fbStateMachine2),
                 Message := 'State fbState5 does not point to the correct state machine');
THIS^.AssertTrue(Condition := THIS^.fbState22.ipStateMachine.Equals(THIS^.fbStateMachine2),
                 Message := 'State fbState6 does not point to the correct state machine');
THIS^.AssertTrue(Condition := THIS^.fbState23.ipStateMachine.Equals(THIS^.fbStateMachine2),
                 Message := 'State fbState7 does not point to the correct state machine');
THIS^.AssertTrue(Condition := THIS^.fbState24.ipStateMachine.Equals(THIS^.fbStateMachine2),
                 Message := 'State fbState8 does not point to the correct state machine');


TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestAdd4StatesManuallyExpectSuccess" Id="{3d072548-6373-06bf-2eb6-e043af8a8196}">
      <Declaration><![CDATA[METHOD PRIVATE TestAdd4StatesManuallyExpectSuccess
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST_ORDERED('TestAdd4StatesManuallyExpectSuccess');

THIS^.AssertTrue(Condition := THIS^.fbStateMachine1.AddState(THIS^.fbState11),
                 Message := 'Failed to add fbState1 to fbStateMachine');
THIS^.AssertFalse(Condition := THIS^.fbStateMachine1.AddState(THIS^.fbState11),
                  Message := 'fbState1 has already been added to fbStateMachine');
THIS^.AssertEquals_UDINT(Expected := 1,
                         Actual := THIS^.fbStateMachine1.nStateCount,
                         Message := 'Unexpected number of states added to state machine');
THIS^.AssertTrue(Condition := THIS^.fbState11.ipStateMachine.Equals(THIS^.fbStateMachine1),
                 Message := 'State fbState1 does not point to the correct state machine');

THIS^.AssertTrue(Condition := THIS^.fbStateMachine1.AddState(THIS^.fbState12),
                 Message := 'Failed to add fbState2 to fbStateMachine');
THIS^.AssertFalse(Condition := THIS^.fbStateMachine1.AddState(THIS^.fbState12),
                  Message := 'fbState2 has already been added to fbStateMachine');
THIS^.AssertEquals_UDINT(Expected := 2,
                         Actual := THIS^.fbStateMachine1.nStateCount,
                         Message := 'Unexpected number of states added to state machine');
THIS^.AssertTrue(Condition := THIS^.fbState12.ipStateMachine.Equals(THIS^.fbStateMachine1),
                 Message := 'State fbState2 does not point to the correct state machine');

THIS^.AssertTrue(Condition := THIS^.fbStateMachine1.AddState(THIS^.fbState13),
                 Message := 'Failed to add fbState3 to fbStateMachine');
THIS^.AssertFalse(Condition := THIS^.fbStateMachine1.AddState(THIS^.fbState13),
                  Message := 'fbState2 has already been added to fbStateMachine');
THIS^.AssertEquals_UDINT(Expected := 3,
                         Actual := THIS^.fbStateMachine1.nStateCount,
                         Message := 'Unexpected number of states added to state machine');
THIS^.AssertTrue(Condition := THIS^.fbState13.ipStateMachine.Equals(THIS^.fbStateMachine1),
                 Message := 'State fbState3 does not point to the correct state machine');

THIS^.AssertTrue(Condition := THIS^.fbStateMachine1.AddState(THIS^.fbState14),
                 Message := 'Failed to add fbState4 to fbStateMachine');
THIS^.AssertFalse(Condition := THIS^.fbStateMachine1.AddState(THIS^.fbState14),
                  Message := 'fbState2 has already been added to fbStateMachine');
THIS^.AssertEquals_UDINT(Expected := 4,
                         Actual := THIS^.fbStateMachine1.nStateCount,
                         Message := 'Unexpected number of states added to state machine');
THIS^.AssertTrue(Condition := THIS^.fbState14.ipStateMachine.Equals(THIS^.fbStateMachine1),
                 Message := 'State fbState4 does not point to the correct state machine');

THIS^.AssertTrue(Condition := THIS^.fbStateMachine1.Contains(THIS^.fbState11),
                 Message := 'State machine does not contain added state fbState1');
THIS^.AssertTrue(Condition := THIS^.fbStateMachine1.Contains(THIS^.fbState12),
                 Message := 'State machine does not contain added state fbState2');
THIS^.AssertTrue(Condition := THIS^.fbStateMachine1.Contains(THIS^.fbState13),
                 Message := 'State machine does not contain added state fbState3');
THIS^.AssertTrue(Condition := THIS^.fbStateMachine1.Contains(THIS^.fbState14),
                 Message := 'State machine does not contain added state fbState4');

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearAllStatesExpectSuccess" Id="{42772bb9-2727-0e5d-0800-50f1dbe0b25b}">
      <Declaration><![CDATA[METHOD PRIVATE TestClearAllStatesExpectSuccess
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST_ORDERED('TestClearAllStatesExpectSuccess');

THIS^.fbStateMachine1.ClearStates();

THIS^.AssertEquals_UDINT(Expected := 0,
                         Actual := THIS^.fbStateMachine1.nStateCount,
                         Message := 'State machine did not clear all states correctly');

THIS^.AssertFalse(Condition := THIS^.fbStateMachine1.Contains(THIS^.fbState11),
                  Message := 'Cleared state should not be in state machine');
THIS^.AssertFalse(Condition := THIS^.fbStateMachine1.Contains(THIS^.fbState12),
                  Message := 'Cleared state should not be in state machine');
THIS^.AssertFalse(Condition := THIS^.fbStateMachine1.Contains(THIS^.fbState13),
                  Message := 'Cleared state should not be in state machine');
THIS^.AssertFalse(Condition := THIS^.fbStateMachine1.Contains(THIS^.fbState14),
                  Message := 'Cleared state should not be in state machine');

TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSeasonStateMachineAllSeasons" Id="{2dca6882-f53b-0c84-2ffc-9dd4e546de3c}">
      <Declaration><![CDATA[METHOD PRIVATE TestSeasonStateMachineAllSeasons
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestSeasonStateMachineAllSeasons');

THIS^.fbYear.Run();

// Summer
THIS^.AssertEquals_BYTE(Expected := 1,
                        Actual := THIS^.fbYear.CurrentState().nTyresType,
                        Message := 'Tyres initialization is incorrect for Summer');
THIS^.AssertTrue(Condition := THIS^.fbYear.CurrentState().Equals(THIS^.fbYear.StateSummer),
                 Message := 'Expected Summer to be the starting season');
THIS^.AssertTrue(Condition := THIS^.fbYear.CurrentState().bSunShining,
                 Message := 'Expected the sun to shine during Summer');
THIS^.AssertEquals_BYTE(Expected := 1,
                        Actual := THIS^.fbYear.CurrentState().nLeavesState,
                        Message := 'Expected the color of the leaves to be green');
THIS^.fbYear.ChangeToWinterTyres();
THIS^.AssertEquals_BYTE(Expected := 1,
                        Actual := THIS^.fbYear.CurrentState().nTyresType,
                        Message := 'Must not be able to put winter tyres on during Summer');

// Autumn
THIS^.fbYear.NextSeason();
THIS^.AssertTrue(Condition := THIS^.fbYear.CurrentState().Equals(THIS^.fbYear.StateAutumn),
                 Message := 'Expected Autumn to be after Summer');
THIS^.AssertTrue(Condition := THIS^.fbYear.CurrentState().bWindBlowing,
                 Message := 'Expected the wind to blow during Autumn');
THIS^.AssertEquals_BYTE(Expected := 2,
                        Actual := THIS^.fbYear.CurrentState().nLeavesState,
                        Message := 'Expected the color of the leaves to be (changing to) yellow/orange/red');
THIS^.fbYear.ChangeToWinterTyres();
THIS^.AssertEquals_BYTE(Expected := 1,
                        Actual := THIS^.fbYear.CurrentState().nTyresType,
                        Message := 'Must not be able to put winter tyres on during Autumn');

// Winter
THIS^.fbYear.NextSeason();
THIS^.AssertTrue(Condition := THIS^.fbYear.CurrentState().Equals(THIS^.fbYear.StateWinter),
                 Message := 'Expected Winter to be after Autumn');
THIS^.AssertTrue(Condition := THIS^.fbYear.CurrentState().bSnowing,
                 Message := 'Expected snow during Winter');
THIS^.AssertEquals_BYTE(Expected := 0,
                        Actual := THIS^.fbYear.CurrentState().nLeavesState,
                        Message := 'Expected (some) leaves to have been fallen off');
THIS^.fbYear.ChangeToWinterTyres();
THIS^.AssertEquals_BYTE(Expected := 0,
                        Actual := THIS^.fbYear.CurrentState().nTyresType,
                        Message := 'Failed to be able to put winter tyres on');

// Spring
THIS^.fbYear.NextSeason();
THIS^.AssertTrue(Condition := THIS^.fbYear.CurrentState().Equals(THIS^.fbYear.StateSpring),
                 Message := 'Expected Spring to be after Winter');
THIS^.AssertTrue(Condition := THIS^.fbYear.CurrentState().bRaining,
                 Message := 'Expected rain during Spring');
THIS^.AssertEquals_BYTE(Expected := 1,
                        Actual := THIS^.fbYear.CurrentState().nLeavesState,
                        Message := 'Expected the color of the leaves to be green');
THIS^.fbYear.ChangeToSummerTyres();
THIS^.AssertEquals_BYTE(Expected := 1,
                        Actual := THIS^.fbYear.CurrentState().nTyresType,
                        Message := 'Failed to be able to put summer tyres on');

TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>