<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_InvocationControl_Test" Id="{7263d65f-90e2-08b9-39cd-4560b563afd2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FB_InvocationControl_Test EXTENDS TcUnit.FB_TestSuite
VAR
    
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[RunAllTheTimeExpectCalledCyclicallyTrue();
RunAllTheTimeExpectNewInvocationOnce();
RunOnceExpectNewInvocationOnce();
RunOncePerCycleExpectMultipleCallAlwaysFalse();
RunThricePerCycleExpectMultipleCallTrue();
]]></ST>
    </Implementation>
    <Method Name="RunAllTheTimeExpectCalledCyclicallyTrue" Id="{3d5364c5-fe28-0bfe-353a-42f8598f619c}">
      <Declaration><![CDATA[METHOD PRIVATE RunAllTheTimeExpectCalledCyclicallyTrue
VAR_INST
    fbCallCtrl:             FB_InvocationControl;
    fbCallCtrlTestTask:     FB_InvocationControlTestTask;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('RunAllTheTimeExpectCalledCyclicallyTrue');

fbCallCtrlTestTask.SetRunCondition(5).Run();

IF fbCallCtrlTestTask.nCycleCounter = 1 THEN
    THIS^.AssertFalse(Condition := fbCallCtrl.bCalledCyclically,
                      Message := '$'bCalledCyclically$' should be false as Track() has not been called at all');
END_IF

fbCallCtrl.Track();

THIS^.AssertTrue(Condition := fbCallCtrl.bCalledCyclically,
                 Message := '$'bCalledCyclically$' is false, but it should be true');

THIS^.AssertTrue(Condition := fbCallCtrl.bCalledThisCycle,
                 Message := '$'bCalledThisCycle$' is false, but it should be true');

IF fbCallCtrlTestTask.nCycleCounter > 1 THEN
    THIS^.AssertTrue(Condition := fbCallCtrl.bCalledLastCycle,
                     Message := '$'bCalledLastCycle$' is false, but it should be true');
    IF NOT fbCallCtrl.bCalledLastCycle THEN
        ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_ERROR,
                  msgFmtStr := fbCallCtrl.ToString(),
                  strArg := '');
    END_IF
ELSE
    THIS^.AssertFalse(Condition := fbCallCtrl.bCalledLastCycle,
                      Message := '$'bCalledLastCycle$' should not be true on the first cycle it is called');
END_IF

IF fbCallCtrlTestTask.bDone THEN
    TcUnit.TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RunAllTheTimeExpectNewInvocationOnce" Id="{fa39bb1a-3ed6-06de-1ea0-2acb1bdbec61}">
      <Declaration><![CDATA[METHOD PRIVATE RunAllTheTimeExpectNewInvocationOnce
VAR_INST
    fbCallCtrl:             FB_InvocationControl;
    fbCallCtrlTestTask:     FB_InvocationControlTestTask;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('RunAllTheTimeExpectNewInvocationOnce');

fbCallCtrlTestTask.SetRunCondition(5).Run();

fbCallCtrl.Track();

IF fbCallCtrlTestTask.nCycleCounter = 1 THEN
    THIS^.AssertTrue(Condition := fbCallCtrl.bNewInvocation,
                     Message := '$'bNewInvocation$' is false, but it should be true');
ELSE
    THIS^.Assertfalse(Condition := fbCallCtrl.bNewInvocation,
                      Message := '$'bNewInvocation$' is true, but it should be false');
END_IF

IF fbCallCtrlTestTask.bDone THEN
    TcUnit.TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RunOnceExpectNewInvocationOnce" Id="{3debd976-be37-0610-3a83-b18dd7099e08}">
      <Declaration><![CDATA[METHOD PRIVATE RunOnceExpectNewInvocationOnce
VAR_INST
    fbCallCtrl:             FB_InvocationControl;
    fbCallCtrlTestTask:     FB_InvocationControlTestTask;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('RunOnceExpectNewInvocationOnce');

fbCallCtrlTestTask.SetRunCondition(5).Run();

IF fbCallCtrlTestTask.nCycleCounter = 3 THEN
    fbCallCtrl.Track();
    THIS^.AssertTrue(Condition := fbCallCtrl.bNewInvocation,
                     Message := '$'bNewInvocation$' is false, but it should be true');
ELSE
    THIS^.AssertFalse(Condition := fbCallCtrl.bNewInvocation,
                      Message := '$'bNewInvocation$' is trie, but it should be false');
END_IF

IF fbCallCtrlTestTask.bDone THEN
    TcUnit.TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RunOncePerCycleExpectMultipleCallAlwaysFalse" Id="{61a9388a-f910-08cb-33f9-eab058edde84}">
      <Declaration><![CDATA[METHOD PRIVATE RunOncePerCycleExpectMultipleCallAlwaysFalse
VAR_INST
    fbCallCtrl:             FB_InvocationControl;
    fbCallCtrlTestTask:     FB_InvocationControlTestTask;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('RunOncePerCycleExpectMultipleCallAlwaysFalse');

fbCallCtrlTestTask.SetRunCondition(5).Run();

THIS^.AssertFalse(Condition := fbCallCtrl.bMultipleCall,
                  Message := '$'bMultipleCall$' is true, but it should be false');

fbCallCtrl.Track();

THIS^.AssertFalse(Condition := fbCallCtrl.bMultipleCall,
                  Message := '$'bMultipleCall$' is true, but it should be false');


IF fbCallCtrlTestTask.bDone THEN
    TcUnit.TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RunThricePerCycleExpectMultipleCallTrue" Id="{28af59b2-e25e-02a5-203e-b72dae7ec16f}">
      <Declaration><![CDATA[METHOD PRIVATE RunThricePerCycleExpectMultipleCallTrue
VAR_INST
    fbCallCtrl:             FB_InvocationControl;
    fbCallCtrlTestTask:     FB_InvocationControlTestTask;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('RunThricePerCycleExpectMultipleCallTrue');

fbCallCtrlTestTask.SetRunCondition(5).Run();

IF fbCallCtrlTestTask.nCycleCounter > 1 THEN
    THIS^.AssertTrue(Condition := fbCallCtrl.bMultipleCall,
                     Message := '$'bMultipleCall$' is false, but it should be true');
END_IF

fbCallCtrl.Track().Track().Track();

THIS^.AssertTrue(Condition := fbCallCtrl.bMultipleCall,
                 Message := '$'bMultipleCall$' is false, but it should be true');

IF fbCallCtrlTestTask.bDone THEN
    TcUnit.TEST_FINISHED();
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>