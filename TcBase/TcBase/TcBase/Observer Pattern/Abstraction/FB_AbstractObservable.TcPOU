<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_AbstractObservable" Id="{71e23688-66a9-4733-83ac-d64ef266e10a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ABSTRACT FB_AbstractObservable EXTENDS FB_OrphanObject IMPLEMENTS I_Observable
VAR
    // Attributes
    _nTypeClass:                __SYSTEM.TYPE_CLASS;
    _bAutoNotify:               BOOL; // Notify automatically on write access of observable value
    _bNotifyWhenChanged:        BOOL := TRUE; // Notify only when the value is actually changed

    // Dynamic mem
    fbMemMan:                   FB_DynMem_Manager;
    fbBuffer:                   FB_DynMem_Buffer(ipMemMan := fbMemMan);
    pipObserver:                POINTER TO I_Observer;
    aPip:                       ARRAY [0..Param_Observer.cMaxNumberOfObservers-1] OF POINTER TO I_Observer; // Debug array
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Attach" Id="{2d2b36e2-7095-4ca4-b111-9d7fc9cde5fd}">
      <Declaration><![CDATA[METHOD Attach : BOOL
VAR_INPUT
    ipObserver:     I_Observer;
END_VAR
VAR
    i:              UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Validate interface pointer
IF ipObserver = 0 THEN
    RETURN;
END_IF

// Max number of observers reached
IF THIS^.nObserverCount >= Param_Observer.cMaxNumberOfObservers THEN
    RETURN;
END_IF

// Incompatible type
IF ipObserver.nTypeClass <> THIS^.nTypeClass THEN
    RETURN;
END_IF

// Create buffer and add observer
IF NOT THIS^.fbBuffer.bAvailable THEN
    THIS^.fbBuffer.CreateBuffer(nSize := SIZEOF(THIS^.pipObserver),
                                bReset := TRUE);

    THIS^.pipObserver := THIS^.fbBuffer.pBuffer;
    THIS^.pipObserver[THIS^.nLastIdx] := ipObserver;
    THIS^.NotifyLast();

    {IF defined(variable: aPip)}
    THIS^.UpdateDebugArray();
    {END_IF}

    Attach := TRUE;
    RETURN;
END_IF

// Make sure observer is not already in the buffer
FOR i := 0 TO THIS^.nLastIdx DO
    IF THIS^.pipObserver[i] = ipObserver THEN
        RETURN;
    END_IF
END_FOR

// Increase buffer size and add observer
THIS^.fbBuffer.Resize(nSize := THIS^.fbBuffer.nBufferSize + SIZEOF(THIS^.pipObserver),
                      bPreserve := TRUE,
                      bReset := FALSE);

THIS^.pipObserver := THIS^.fbBuffer.pBuffer;
THIS^.pipObserver[THIS^.nLastIdx] := ipObserver;
THIS^.NotifyLast();

{IF defined(variable: aPip)}
THIS^.UpdateDebugArray();
{END_IF}

Attach := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="bAutoNotify" Id="{74df07db-08be-0573-3a37-5dccf1e7dd5d}">
      <Declaration><![CDATA[(*Notify automatically on write access of observable value*)
PROPERTY bAutoNotify : BOOL]]></Declaration>
      <Get Name="Get" Id="{a06b71cf-b5b1-0175-3fce-b660054066b7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bAutoNotify := THIS^._bAutoNotify;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f620f6a5-c227-0747-3833-7da8408dde07}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^._bAutoNotify := bAutoNotify;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="bNotifyWhenChanged" Id="{fa76d4ca-250f-06a1-1b4a-98443338ae81}">
      <Declaration><![CDATA[PROPERTY bNotifyWhenChanged : BOOL]]></Declaration>
      <Get Name="Get" Id="{a9c32db7-d8ca-0b27-2cec-3449b9ed6a56}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bNotifyWhenChanged := THIS^._bNotifyWhenChanged;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3bd698f8-1830-0ba9-1433-e88070376d5d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^._bNotifyWhenChanged := bNotifyWhenChanged;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Detach" Id="{cd87a177-86aa-454f-9754-8649faed008d}">
      <Declaration><![CDATA[METHOD Detach : BOOL
VAR_INPUT
    ipObserver:     I_Observer;
END_VAR
VAR
    i:              UDINT;
    j:              UDINT;
    bFoundItem:     BOOL;
    nRemoveIdx:     UDINT;
    pTmp:           POINTER TO BYTE;
    nPTmpSize:      UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Validate interface pointer
IF ipObserver = 0 THEN
    RETURN;
END_IF

// Nothing to remove
IF THIS^.fbBuffer.nBufferSize = 0 THEN
    RETURN;
END_IF

// Find correct observer index to remove
FOR i := 0 TO THIS^.nLastIdx DO
    IF THIS^.pipObserver[i] = ipObserver THEN
        nRemoveIdx := i;
        bFoundItem := TRUE;
        EXIT;
    END_IF
END_FOR

// No item found
IF NOT bFoundItem THEN
    RETURN;

// Found the only item to be removed
ELSIF THIS^.nObserverCount = 1 THEN
    THIS^.fbBuffer.Resize(nSize := 0,
                          bPreserve := FALSE,
                          bReset := TRUE);

    THIS^.pipObserver := THIS^.fbBuffer.pBuffer;

    {IF defined(variable: aPip)}
    THIS^.UpdateDebugArray();
    {END_IF}

    Detach := TRUE;

    RETURN;
END_IF

// Create temporary buffer
nPTmpSize := fbBuffer.nBufferSize - SIZEOF(THIS^.pipObserver);
pTmp := __NEW(BYTE, nPTmpSize);

Tc2_System.MEMCPY(destAddr := pTmp,
                  srcAddr := THIS^.pipObserver,
                  n := nRemoveIdx*SIZEOF(POINTER TO I_Observer));

IF nRemoveIdx < THIS^.nLastIdx THEN
    Tc2_System.MEMCPY(destAddr := pTmp,
                      srcAddr := ADR(THIS^.pipObserver[nRemoveIdx + 1]),
                      n := (THIS^.nLastIdx - nRemoveIdx)*SIZEOF(POINTER TO I_Observer));
END_IF

// Shrink main buffer and clean the contents
THIS^.fbBuffer.Resize(nSize := nPTmpSize,
                      bPreserve := FALSE,
                      bReset := TRUE);

THIS^.pipObserver := fbBuffer.pBuffer;

// Copy contents from temp buffer back to main buffer
Tc2_System.MEMCPY(destAddr := THIS^.pipObserver,
                  srcAddr := pTmp,
                  n := nPTmpSize);

// Delete temp buffer after use
IF pTmp <> 0 THEN
    __DELETE(pTmp);
END_IF

{IF defined(variable: aPip)}
THIS^.UpdateDebugArray();
{END_IF}

Detach := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{cfb9d78b-f9b9-4c25-a6c3-89cdbb34fd0b}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains:       BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode:        BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
    bAutoNotify:        BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^._bAutoNotify := bAutoNotify;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="nDataSize" Id="{06add94f-024a-47dc-87bf-b64b73b81f23}">
      <Declaration><![CDATA[PROPERTY ABSTRACT nDataSize : UDINT
]]></Declaration>
      <Get Name="Get" Id="{0f065d40-3079-435c-abd4-35bc9982957a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="nLastIdx" Id="{2c79c953-5622-435d-a939-cc4a5f7e264e}">
      <Declaration><![CDATA[PROPERTY PROTECTED nLastIdx : UDINT]]></Declaration>
      <Get Name="Get" Id="{c29b0475-f6df-4d45-ac76-cc7c5921980f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF THIS^.fbBuffer.nBufferSize > 0 THEN
    nLastIdx := THIS^.fbBuffer.nBufferSize/SIZEOF(THIS^.pipObserver) - 1;
ELSE
    nLastIdx := 0;
END_IF
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="nObserverCount" Id="{8a1f52c0-3800-483e-a595-61cd3c373210}">
      <Declaration><![CDATA[PROPERTY nObserverCount : UDINT
]]></Declaration>
      <Get Name="Get" Id="{11fffc9e-f7b8-44c7-97d9-9f9f0d9e2267}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF THIS^.fbBuffer.nBufferSize > 0 THEN
    nObserverCount := THIS^.nLastIdx + 1;
ELSE
    nObserverCount := 0;
END_IF
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Notify" Id="{50b7b6ea-de79-46bd-bf28-05ba956e9a25}">
      <Declaration><![CDATA[METHOD Notify : I_Observable
VAR
    i:      UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Notify := THIS^;

IF THIS^.nObserverCount <= 0 THEN
    RETURN;
END_IF

FOR i := 0 TO THIS^.nLastIdx DO
    THIS^.pipObserver[i].UpdateP(THIS^.pData,
                                 THIS^.nDataSize,
                                 THIS^._nTypeClass);
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="NotifyLast" Id="{bfb98185-9d2f-403d-8101-4e4bed875c91}">
      <Declaration><![CDATA[METHOD NotifyLast : I_Observable
]]></Declaration>
      <Implementation>
        <ST><![CDATA[NotifyLast := THIS^;

IF THIS^.nObserverCount <= 0 THEN
    RETURN;
END_IF

THIS^.pipObserver[THIS^.nLastIdx].UpdateP(THIS^.pData,
                                          THIS^.nDataSize,
                                          THIS^._nTypeClass);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="NotifyWithConditions" Id="{b742a386-1bb7-051d-3dff-2af66164d0e9}">
      <Declaration><![CDATA[METHOD PROTECTED NotifyWithConditions : I_Observable
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[NotifyWithConditions := THIS^;

IF NOT THIS^._bAutoNotify THEN
    RETURN;
END_IF

IF THIS^._bNotifyWhenChanged
    AND_THEN NOT THIS^.ValueChanged() THEN
    RETURN;
END_IF

THIS^.Notify();
]]></ST>
      </Implementation>
    </Method>
    <Property Name="nTypeClass" Id="{1858b07f-e893-0a1d-310c-1f93f7d39211}">
      <Declaration><![CDATA[PROPERTY nTypeClass : __SYSTEM.TYPE_CLASS]]></Declaration>
      <Get Name="Get" Id="{ee9d73be-04be-0396-0ea3-61aae24b72b3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nTypeClass := THIS^._nTypeClass;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="pData" Id="{dc2c7af6-7d54-4c13-8681-c25bac9e7fcb}">
      <Declaration><![CDATA[PROPERTY PROTECTED ABSTRACT pData : POINTER TO BYTE]]></Declaration>
      <Get Name="Get" Id="{13c43774-fcc5-43db-b9fd-56325378b403}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="UpdateDebugArray" Id="{d2dd83c4-e423-4d5c-abb7-4b336ab5b071}">
      <Declaration><![CDATA[METHOD PRIVATE UpdateDebugArray : BOOL
VAR_INPUT
END_VAR
VAR
    i:                  UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[{IF defined(variable: aPip)}
MEMSET(
    destAddr := ADR(THIS^.aPip),
    fillByte := 0,
    n := SIZEOF(THIS^.aPip));

FOR i := 0 TO THIS^.nLastIdx DO
    THIS^.aPip[i] := ADR(THIS^.pipObserver[i]);
END_FOR
{END_IF}
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValueChanged" Id="{010c3d67-bfde-02a5-1223-efc7d35699a5}">
      <Declaration><![CDATA[METHOD ABSTRACT ValueChanged : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>