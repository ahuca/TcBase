<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_List_Test" Id="{1a035af9-1f4a-4c2b-866c-d7c24ad05b20}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_List_Test EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAdd5DifferentItemsExpectAll5Added();
TestAdd5TimesSameObjectExpectAll5Copies();
//TestAddManyItemsExpectSuccess();
TestAddNullInterfaceExpectNothingAdded();
TestClearList();
TestContains();
TestEmptyListMustHaveNoItem();
TestIndexOfItem();
TestInsertIntoEmptyListExpectSuccess();
TestInsertIntoListOfItemsExpectSuccess();
TestRemoveByIndexFromEmptyListExpectFailure();
TestRemoveByIndexFromListOf5DifferentItemsExpectSuccess();
TestRemoveByInvalidIndexFromListOfItemsExpectFailure();
TestRemoveInvalidItemFromListExpectFailure();
TestRemoveValidItemFromListExpectSuccess();]]></ST>
    </Implementation>
    <Method Name="TestAdd5DifferentItemsExpectAll5Added" Id="{cb169e4c-2c88-4b92-b5e5-764cc08e99d9}">
      <Declaration><![CDATA[METHOD PRIVATE TestAdd5DifferentItemsExpectAll5Added
VAR_INST
    fbList: FB_List;

    aObject: ARRAY [1..5] OF FB_TestObject(0);
    ipTmp: I_Object;
    ipCmp: I_Object;
    i: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestAdd5DifferentItemsExpectAll5Added');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    THIS^.AssertEquals_DINT(Expected := TO_DINT(i - 1),
                            Actual := fbList.AddItem(aObject[i]),
                            Message := 'Failed to add object to list');
END_FOR

THIS^.AssertEquals_UDINT(Expected := SIZEOF(aObject)/SIZEOF(aObject[1]),
                         Actual := fbList.nCount,
                         Message := 'Unexpected number of items added to list');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    ipTmp := fbList.ItemAt(TO_DINT(i - 1));
    ipCmp := aObject[i];
    THIS^.AssertTrue(Condition := ipTmp = ipCmp,
                     Message := CONCAT('Unexpected item at index ', TO_STRING(i)));
END_FOR

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestAdd5TimesSameObjectExpectAll5Copies" Id="{3ca91ba7-9183-44ac-b311-2309498dfce4}">
      <Declaration><![CDATA[METHOD PRIVATE TestAdd5TimesSameObjectExpectAll5Copies
VAR_INST
    fbList: FB_List;

    nTimesToAdd: UDINT;
    fbObject: FB_TestObject(0);
    ipTmp: I_Object;
    ipCmp: I_Object;
    i: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestAdd5TimesSameObjectExpectAll5Copies');

nTimesToAdd := 5;

FOR i := 1 TO nTimesToAdd DO
    THIS^.AssertEquals_DINT(Expected := TO_DINT(i - 1),
                            Actual := fbList.AddItem(fbObject),
                            Message := 'Failed to add object to list');
END_FOR

THIS^.AssertEquals_UDINT(Expected := nTimesToAdd,
                         Actual := fbList.nCount,
                         Message := 'Unexpected number of items added to list');

FOR i := 1 TO nTimesToAdd DO
    ipTmp := fbList.ItemAt(TO_DINT(i - 1));
    ipCmp := fbObject;
    THIS^.AssertTrue(Condition := ipTmp = ipCmp,
                     Message := 'Unexpected item added to list');
END_FOR

TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestAddManyItemsExpectSuccess" Id="{2904a91f-4ce0-4d64-afe1-9d8098bff3b5}">
      <Declaration><![CDATA[METHOD PRIVATE TestAddManyItemsExpectSuccess
VAR_INST
    fbList: FB_List;

    fbObject: FB_TestObject(0);

    ipTmp: I_Object;
    ipCmp: I_Object;
    nNumberOfTimesToAdd: UDINT;
    i: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestAddManyItemsExpectSuccess');

nNumberOfTimesToAdd := 100000;

FOR i := 1 TO nNumberOfTimesToAdd DO
    fbList.AddItem(fbObject);
END_FOR

THIS^.AssertEquals_UDINT(Expected := TO_UDINT(nNumberOfTimesToAdd),
                         Actual := fbList.nCount,
                         Message := 'Unexpected number of items added to list');

TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestAddNullInterfaceExpectNothingAdded" Id="{df064f7b-16b4-415e-b378-70531ace6d5a}">
      <Declaration><![CDATA[METHOD PRIVATE TestAddNullInterfaceExpectNothingAdded
VAR_INST
    fbList: FB_List;

    ipTmp: I_Object;
    i: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestAddNullInterfaceExpectNothingAdded');

FOR i := 1 TO 5 DO
    THIS^.AssertEquals_DINT(Expected := -1,
                            Actual := fbList.AddItem(ipTmp),
                            Message := 'Null item added to list');
END_FOR

THIS^.AssertEquals_UDINT(Expected := 0,
                         Actual := fbList.nCount,
                         Message := 'List has item(s) in it, but it should not');

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearList" Id="{ec8b00a0-59cd-43b6-a13d-289f5cfc8ce7}">
      <Declaration><![CDATA[METHOD PRIVATE TestClearList
VAR_INST
    fbList: FB_List;

    aObject: ARRAY [1..5] OF FB_TestObject(0);
    ipTmp: I_Object;
    i: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestClearList');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    fbList.AddItem(aObject[i]);
END_FOR

THIS^.AssertEquals_UDINT(Expected := SIZEOF(aObject)/SIZEOF(aObject[1]),
                         Actual := fbList.nCount,
                         Message := 'Unexpected number of items added to list');

fbList.Clear();

THIS^.AssertEquals_UDINT(Expected := 0,
                         Actual := fbList.nCount,
                         Message := 'List was not correctly cleared');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    ipTmp := fbList.ItemAt(TO_DINT(i));
    THIS^.AssertTrue(Condition := ipTmp = 0,
                     Message := 'List was not correctly cleared');
END_FOR

// Intentionally clear twice to make sure there's no exception
// when doing so
fbList.Clear();

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestContains" Id="{f311bee0-7432-4c26-a6c3-86a8d22d7e1c}">
      <Declaration><![CDATA[METHOD PRIVATE TestContains
VAR_INST
    fbList: FB_List;

    aObject: ARRAY [1..5] OF FB_TestObject(0);

    ipNull: I_Object;
    i: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestContains');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    fbList.AddItem(aObject[i]);
END_FOR

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    THIS^.AssertTrue(Condition := fbList.Contains(aObject[i]),
                     Message := 'List does not contain added item');
END_FOR

THIS^.AssertFalse(Condition := fbList.Contains(ipNull),
                  Message := 'List should not contain null object');

fbList.Clear();

THIS^.AssertFalse(Condition := fbList.Contains(ipNull),
                  Message := 'List should not contain null object');

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestEmptyListMustHaveNoItem" Id="{e221371c-ce72-442a-9bb2-25587eb6f328}">
      <Declaration><![CDATA[METHOD PRIVATE TestEmptyListMustHaveNoItem
VAR_INST
    fbList:     FB_List;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestEmptyListMustHaveNoItem');

THIS^.AssertEquals_UDINT(Expected := 0,
                         Actual := fbList.nCount,
                         Message := 'Empty list must not have any item(s)');

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIndexOfItem" Id="{1f2f65e9-8e03-49d4-99e5-ea807ffa6c1b}">
      <Declaration><![CDATA[METHOD PRIVATE TestIndexOfItem
VAR_INST
    fbList: FB_List;

    aObject: ARRAY [1..10] OF FB_TestObject(0);
    fbObject1: FB_TestObject(0);
    fbObject2: FB_TestObject(0);
    fbObject3: FB_TestObject(0);

    ipNull: I_Object;
    i: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestIndexQuerryCorrectness');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    fbList.AddItem(aObject[i]);
END_FOR

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    THIS^.AssertEquals_DINT(Expected := TO_DINT(i - 1),
                            Actual := fbList.IndexOfItem(aObject[i]),
                            Message := 'Unexpected index of added item');
END_FOR

fbList.Clear();

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    THIS^.AssertEquals_DINT(Expected := -1,
                            Actual := fbList.IndexOfItem(aObject[i]),
                            Message := 'Item still found from list even though it has been cleared');
END_FOR

THIS^.AssertEquals_DINT(Expected := -1,
                        Actual := fbList.IndexOfItem(ipNull),
                        Message := 'Invalid result when querying index of a null item');

fbList.AddItem(fbObject1);
fbList.AddItem(fbObject3);
fbList.AddItem(fbObject1);
fbList.AddItem(fbObject2);
fbList.AddItem(fbObject2);

THIS^.AssertEquals_DINT(Expected := 0,
                        Actual := fbList.IndexOfItem(fbObject1),
                        Message := 'IndexOfItem() should return the index of the first match if there are multiple copies');
THIS^.AssertEquals_DINT(Expected := 1,
                        Actual := fbList.IndexOfItem(fbObject3),
                        Message := 'IndexOfItem() should return the index of the first match if there are multiple copies');
THIS^.AssertEquals_DINT(Expected := 3,
                        Actual := fbList.IndexOfItem(fbObject2),
                        Message := 'IndexOfItem() should return the index of the first match if there are multiple copies');


TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInsertIntoEmptyListExpectSuccess" Id="{6e8c8d7f-00a4-47ea-8804-deb61ec5d4cd}">
      <Declaration><![CDATA[METHOD PRIVATE TestInsertIntoEmptyListExpectSuccess
VAR_INST
    fbList: FB_List;

    aObject: ARRAY [1..10] OF FB_TestObject(0);
    aInsPos: ARRAY [1..10] OF DINT;
    ipTmp: I_Object;
    ipCmp: I_Object;

    i: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestInsertIntoEmptyListExpectSuccess');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    IF i = 4 THEN
        aInsPos[i] := 0;
    ELSIF i = 8 THEN
        aInsPos[i] := 4;;
    ELSIF i = 10 THEN
        aInsPos[i] := 1;
    ELSE
        aInsPos[i] := TO_DINT(i - 1);
    END_IF

    THIS^.AssertTrue(Condition := fbList.Insert(nIdx := aInsPos[i], aObject[i]),
                     Message := 'Could not insert item to list');

    ipTmp := fbList.ItemAt(aInsPos[i]);
    ipCmp := aObject[i];
    THIS^.AssertTrue(Condition := ipTmp = ipCmp,
                     Message := 'Added item is not at the expected index');
END_FOR

THIS^.AssertEquals_UDINT(Expected := SIZEOF(aObject)/SIZEOF(aObject[1]),
                         Actual := fbList.nCount,
                         Message := 'Unexpected number of items inserted to list');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    THIS^.AssertTrue(Condition := fbList.Contains(aObject[i]),
                     Message := 'List does not contain inserted item');
END_FOR

TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInsertIntoListOfItemsExpectSuccess" Id="{f118cdfd-9a8d-43f8-9ab1-bed66465d3fe}">
      <Declaration><![CDATA[METHOD PRIVATE TestInsertIntoListOfItemsExpectSuccess
VAR_INST
    fbList: FB_List;

    aObject: ARRAY [1..10] OF FB_TestObject(0);
    aObjectToInsert: ARRAY [1..3] OF FB_TestObject(0);
    aInsPos: ARRAY [1..3] OF DINT;
    ipTmp: I_Object;
    ipCmp: I_Object;

    i: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestInsertIntoListOfItemsExpectSuccess');

{region "Insert to head, end, and middle"}
FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    fbList.AddItem(aObject[i]);
END_FOR

aInsPos[1] := 0;
aInsPos[2] := TO_DINT(fbList.nCount + 1);
aInsPos[3] := 3;

FOR i := 1 TO SIZEOF(aInsPos)/SIZEOF(aInsPos[1]) DO
    THIS^.AssertTrue(Condition := fbList.Insert(aInsPos[i], aObjectToInsert[i]),
                     Message := 'Failed to insert item into list');

    ipTmp := fbList.ItemAt(aInsPos[i]);
    ipCmp := aObjectToInsert[i];
    THIS^.AssertTrue(Condition := ipTmp = ipCmp,
                     Message := 'Added item is not at the expected index');
END_FOR

THIS^.AssertEquals_UDINT(Expected := SIZEOF(aObject)/SIZEOF(aObject[1])
                                     + SIZEOF(aObjectToInsert)/SIZEOF(aObjectToInsert[1]),
                         Actual := fbList.nCount,
                         Message := 'Unexpected number of items inserted to list');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    THIS^.AssertTrue(Condition := fbList.Contains(aObject[i]),
                     Message := 'List does not contain inserted item');
END_FOR

FOR i := 1 TO SIZEOF(aObjectToInsert)/SIZEOF(aObjectToInsert[1]) DO
    THIS^.AssertTrue(Condition := fbList.Contains(aObjectToInsert[i]),
                     Message := 'List does not contain inserted item');
END_FOR
{endregion}

fbList.Clear();

{region "Insert to middle"}
FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    fbList.AddItem(aObject[i]);
END_FOR

aInsPos[1] := 8;
aInsPos[2] := 5;
aInsPos[3] := 1;

FOR i := 1 TO SIZEOF(aInsPos)/SIZEOF(aInsPos[1]) DO
    THIS^.AssertTrue(Condition := fbList.Insert(aInsPos[i], aObjectToInsert[i]),
                     Message := 'Failed to insert item into list');

    ipTmp := fbList.ItemAt(aInsPos[i]);
    ipCmp := aObjectToInsert[i];
    THIS^.AssertTrue(Condition := ipTmp = ipCmp,
                     Message := 'Added item is not at the expected index');
END_FOR

THIS^.AssertEquals_UDINT(Expected := SIZEOF(aObject)/SIZEOF(aObject[1])
                                     + SIZEOF(aObjectToInsert)/SIZEOF(aObjectToInsert[1]),
                         Actual := fbList.nCount,
                         Message := 'Unexpected number of items inserted to list');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    THIS^.AssertTrue(Condition := fbList.Contains(aObject[i]),
                     Message := 'List does not contain inserted item');
END_FOR

FOR i := 1 TO SIZEOF(aObjectToInsert)/SIZEOF(aObjectToInsert[1]) DO
    THIS^.AssertTrue(Condition := fbList.Contains(aObjectToInsert[i]),
                     Message := 'List does not contain inserted item');
END_FOR
{endregion}

TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestRemoveByIndexFromEmptyListExpectFailure" Id="{d01caaa3-9424-4c89-9f9d-d1844e47312b}">
      <Declaration><![CDATA[METHOD PRIVATE TestRemoveByIndexFromEmptyListExpectFailure
VAR_INST
    fbList: FB_List;

    aIdx: ARRAY[1..10] OF DINT := 
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

    i: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestRemoveByIndexFromEmptyListExpectFailure');

FOR i := 1 TO SIZEOF(aIdx)/SIZEOF(aIdx[1]) DO
    THIS^.AssertFalse(Condition := fbList.RemoveAt(aIdx[i]),
                      Message := 'Empty list should not have any item to be removed');
END_FOR

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestRemoveByIndexFromListOf5DifferentItemsExpectSuccess" Id="{5a95b608-27ac-4a43-a9d1-799cb7b76773}">
      <Declaration><![CDATA[METHOD PRIVATE TestRemoveByIndexFromListOf5DifferentItemsExpectSuccess
VAR_INST
    fbList: FB_List;

    aIdx: ARRAY[1..5] OF DINT := 
        [-1, 5, 6, 7, 10];

    aObject: ARRAY [1..5] OF FB_TestObject(0);

    nArraySize: UDINT;
    i: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestRemoveItemFromListOf5DifferentItemsExpectSuccess');
nArraySize := SIZEOF(aObject)/SIZEOF(aObject[1]);

// Remove from last to first
FOR i := 1 TO nArraySize DO
    fbList.AddItem(aObject[i]);
END_FOR

FOR i := 1 TO nArraySize DO
    THIS^.AssertTrue(Condition := fbList.RemoveAt(TO_DINT(nArraySize - i)),
                     Message := 'Could not remove added item');

    THIS^.AssertEquals_UDINT(Expected := nArraySize - i,
                             Actual := fbList.nCount,
                             Message := 'Unexpected number of items after removal');
END_FOR

// Remove from first
FOR i := 1 TO nArraySize DO
    fbList.AddItem(aObject[i]);
END_FOR

FOR i := 1 TO nArraySize DO
    THIS^.AssertTrue(Condition := fbList.RemoveAt(0),
                     Message := 'Could not remove added item');

    THIS^.AssertEquals_UDINT(Expected := nArraySize - i,
                             Actual := fbList.nCount,
                             Message := 'Unexpected number of items after removal');
END_FOR

// Remove from middle to first
FOR i := 1 TO nArraySize DO
    fbList.AddItem(aObject[i]);
END_FOR

FOR i := 1 TO nArraySize DO
    THIS^.AssertTrue(Condition := fbList.RemoveAt(MAX(0, 3 - TO_DINT(i))),
                     Message := 'Could not remove added item');

    THIS^.AssertEquals_UDINT(Expected := nArraySize - i,
                             Actual := fbList.nCount,
                             Message := 'Unexpected number of items after removal');
END_FOR

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestRemoveByInvalidIndexFromListOfItemsExpectFailure" Id="{e59636a8-9445-4317-ac9c-3e5911a9f2ce}">
      <Declaration><![CDATA[METHOD PRIVATE TestRemoveByInvalidIndexFromListOfItemsExpectFailure
VAR_INST
    fbList: FB_List;

    aIdx: ARRAY[1..10] OF DINT := 
        [-1, 5, 6, 7, 10, -10, -3, -4, -2, 9];
    aObject: ARRAY [1..5] OF FB_TestObject(0);

    i: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestRemoveByInvalidIndexFromListOfItemsExpectFailure');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    fbList.AddItem(aObject[i]);
END_FOR

FOR i := 1 TO SIZEOF(aIdx)/SIZEOF(aIdx[1]) DO
    THIS^.AssertFalse(Condition := fbList.RemoveAt(aIdx[i]),
                      Message := 'Removing item with out-of-bound index should not succeed');
END_FOR

THIS^.AssertEquals_UDINT(Expected := 5,
                         Actual := fbList.nCount,
                         Message := 'Item(s) were successfully removed from list with out-of-bound index');

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestRemoveInvalidItemFromListExpectFailure" Id="{58982acb-6137-40f2-95f5-e45f65e686f1}">
      <Declaration><![CDATA[METHOD PRIVATE TestRemoveInvalidItemFromListExpectFailure
VAR_INST
    fbList: FB_List;

    aObject: ARRAY [1..10] OF FB_TestObject(0);
    ipNull: I_Object;
    fbObject: FB_TestObject(0);

    i: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestRemoveInvalidItemFromListExpectFailure');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    fbList.AddItem(aObject[i]);
END_FOR

THIS^.AssertFalse(Condition := fbList.Remove(ipNull),
                  Message := 'Unexpectedly removed a null item');

THIS^.AssertFalse(Condition := fbList.Remove(fbObject),
                  Message := 'List should not be able to remove item it does not contain');

THIS^.AssertEquals_UDINT(Expected := SIZEOF(aObject)/SIZEOF(aObject[1]),
                         Actual := fbList.nCount,
                         Message := 'Unexpected number of items after invalid removal');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    THIS^.AssertTrue(Condition := fbList.Remove(aObject[i]),
                     Message := 'Could not remove added item');

    THIS^.AssertFalse(Condition := fbList.Remove(aObject[i]),
                      Message := 'Removed item was unexpectedly removed twice');

    THIS^.AssertEquals_UDINT(Expected := SIZEOF(aObject)/SIZEOF(aObject[1]) - i,
                             Actual := fbList.nCount,
                             Message := 'Unexpected number of items after removal');
END_FOR

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestRemoveValidItemFromListExpectSuccess" Id="{fa22c7d3-93bf-4f09-9db9-90f6a8724484}">
      <Declaration><![CDATA[METHOD PRIVATE TestRemoveValidItemFromListExpectSuccess
VAR_INST
    fbList: FB_List;

    aObject: ARRAY [1..10] OF FB_TestObject(0);

    i: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestRemoveValidItemFromListExpectSuccess');

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    fbList.AddItem(aObject[i]);
END_FOR

FOR i := 1 TO SIZEOF(aObject)/SIZEOF(aObject[1]) DO
    THIS^.AssertTrue(Condition := fbList.Remove(aObject[i]),
                     Message := 'Could not remove added item');

    THIS^.AssertEquals_UDINT(Expected := SIZEOF(aObject)/SIZEOF(aObject[1]) - i,
                             Actual := fbList.nCount,
                             Message := 'Unexpected number of items after removal');
END_FOR

TcUnit.TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>