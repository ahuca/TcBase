<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ListCapacity_Test" Id="{5829bbde-f5fc-42c5-b7ae-758e6820d635}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ListCapacity_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddMoreItemsThanCurrentCapacityExpectCapacityToDouble();
TestInitializeCapacityWithNonZeroValuesExpectSuccess();
TestRemoveItemsLowerThanHalfCurrentCapacityExpectCapacityTrimmed();
TestTrimCapacityExpectCapacityEqualsCurrentItemCount();
TestTrimCapacityExpectTheSameContentsAsBefore();
]]></ST>
    </Implementation>
    <Method Name="TestAddMoreItemsThanCurrentCapacityExpectCapacityToDouble" Id="{293877fd-4030-4743-ac22-6b168b91c163}">
      <Declaration><![CDATA[METHOD PRIVATE TestAddMoreItemsThanCurrentCapacityExpectCapacityToDouble
VAR_INST
    fbList: FB_List_proxy(5);
    fbObject: FB_TestObject;
    i: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestAddMoreItemsThanCurrentCapacityExpectCapacityToDouble');

THIS^.AssertEquals_UDINT(Expected := 5,
                         Actual := fbList.nCapacity,
                         Message := 'Unexpected initial capacity');

FOR i := 1 TO 21 DO
    fbList.AddItem(fbObject);
    IF 6 <= i AND_THEN i <= 10 THEN
        THIS^.AssertEquals_UDINT(Expected := 10,
                                 Actual := fbList.nCapacity,
                                 Message := 'Unexpected new capacity');
    ELSIF 10 < i AND_THEN i <= 11 THEN
        THIS^.AssertEquals_UDINT(Expected := 20,
                                 Actual := fbList.nCapacity,
                                 Message := 'Unexpected new capacity');
    ELSIF i > 20 THEN
        THIS^.AssertEquals_UDINT(Expected := 40,
                                 Actual := fbList.nCapacity,
                                 Message := 'Unexpected new capacity');
    END_IF
END_FOR


TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInitializeCapacityWithNonZeroValuesExpectSuccess" Id="{ac161ae3-867a-4ce1-bee9-f8aeaf1b6bff}">
      <Declaration><![CDATA[METHOD PRIVATE TestInitializeCapacityWithNonZeroValuesExpectSuccess
VAR_INST
    aList: ARRAY [1..5] OF FB_List[(4), (10), (20), (100), (1000)];
    aExpected: ARRAY [1..5] OF UDINT := [4, 10, 20, 100, 1000];
    i: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestInitializeCapacityWithNonZeroValuesExpectSuccess');

FOR i := 1 TO SIZEOF(aList)/SIZEOF(aList[1]) DO
    THIS^.AssertEquals_UDINT(Expected := aExpected[i],
                             Actual := aList[i].nCapacity,
                             Message := 'Unexpected capacity');
END_FOR

TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestRemoveItemsLowerThanHalfCurrentCapacityExpectCapacityTrimmed" Id="{4cd3d8bd-805c-4ef2-8725-375e5203f2ca}">
      <Declaration><![CDATA[METHOD PRIVATE TestRemoveItemsLowerThanHalfCurrentCapacityExpectCapacityTrimmed
VAR_INST
    fbList: FB_List_proxy(5);
    fbObject: FB_TestObject;
    i: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestRemoveItemsLowerThanHalfCurrentCapacityExpectCapacityTrimmed');

THIS^.AssertEquals_UDINT(Expected := 5,
                         Actual := fbList.nCapacity,
                         Message := 'Unexpected initial capacity');

FOR i := 1 TO 15 DO
    fbList.AddItem(fbObject);
END_FOR

THIS^.AssertEquals_UDINT(Expected := 20,
                         Actual := fbList.nCapacity,
                         Message := 'Unexpected new capacity');

FOR i := 1 TO 15 DO
    fbList.RemoveAt(0);
    IF 1 <= i AND_THEN i < 5 THEN
        THIS^.AssertEquals_UDINT(Expected := 20,
                                 Actual := fbList.nCapacity,
                                 Message := 'Capacity should not be reduced yet');
    ELSIF 5 <= i AND_THEN i < 10 THEN
        THIS^.AssertEquals_UDINT(Expected := 10,
                                 Actual := fbList.nCapacity,
                                 Message := 'Capacity should be trimmed');
    ELSIF 10 <= i AND_THEN i < 13 THEN
        THIS^.AssertEquals_UDINT(Expected := 5,
                                 Actual := fbList.nCapacity,
                                 Message := 'Capacity should be trimmed');
    ELSE
        THIS^.AssertEquals_UDINT(Expected := Param_List.nDefaultCapacity,
                                 Actual := fbList.nCapacity,
                                 Message := 'Capacity should not be lower than default capacity');
    END_IF
END_FOR

TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTrimCapacityExpectCapacityEqualsCurrentItemCount" Id="{7b873bd8-ba5c-40e0-a52e-7e33df410e4b}">
      <Declaration><![CDATA[METHOD PRIVATE TestTrimCapacityExpectCapacityEqualsCurrentItemCount
VAR_INST
    fbList: FB_List_proxy(5);

    nTimesToAdd: UDINT;
    fbObject: FB_TestObject;

    i: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestTrimCapacityExpectCapacityEqualsCurrentItemCount');

THIS^.AssertEquals_UDINT(Expected := 5,
                         Actual := fbList.nCapacity,
                         Message := 'Unexpected initial capacity');

nTimesToAdd := 6;

FOR i := 1 TO 15 DO
    fbList.AddItem(fbObject);
END_FOR

THIS^.AssertEquals_UDINT(Expected := 20,
                         Actual := fbList.nCapacity,
                         Message := 'Unexpected capacity before trimming');

fbList.TrimCapacity();

THIS^.AssertEquals_UDINT(Expected := 15,
                         Actual := fbList.nCapacity,
                         Message := 'Unexpected capacity after trimming');

TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTrimCapacityExpectTheSameContentsAsBefore" Id="{3b1fd52e-8843-4a43-ac17-6d33124bcaa8}">
      <Declaration><![CDATA[METHOD PRIVATE TestTrimCapacityExpectTheSameContentsAsBefore
VAR_INST
    fbList: FB_List_proxy(5);

    nTimesToAdd: UDINT;
    fbObject: FB_TestObject;

    i: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('TestTrimCapacityExpectTheSameContentsAsBefore');

THIS^.AssertEquals_UDINT(Expected := 5,
                         Actual := fbList.nCapacity,
                         Message := 'Unexpected initial capacity');

nTimesToAdd := 6;

FOR i := 1 TO 15 DO
    fbList.AddItem(fbObject);
END_FOR

THIS^.AssertEquals_UDINT(Expected := 20,
                         Actual := fbList.nCapacity,
                         Message := 'Unexpected capacity before trimming');

fbList.TrimCapacity();

THIS^.AssertEquals_UDINT(Expected := 15,
                         Actual := fbList.nCapacity,
                         Message := 'Unexpected capacity after trimming');

FOR i := 1 TO 15 DO
    THIS^.AssertTrue(Condition := fbList.ItemAt(TO_DINT(i - 1)).Equals(fbObject),
                     Message := CONCAT('Unexpected item at index ', TO_STRING(i)));
END_FOR

TcUnit.TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>